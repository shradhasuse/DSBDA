{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c02d0e90-5507-479f-978f-2065d8abce93",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pandas\n",
      "  Using cached pandas-2.2.3-cp313-cp313-win_amd64.whl.metadata (19 kB)\n",
      "Requirement already satisfied: numpy>=1.26.0 in c:\\users\\shrad\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from pandas) (2.2.2)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\shrad\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from pandas) (2.9.0.post0)\n",
      "Collecting pytz>=2020.1 (from pandas)\n",
      "  Using cached pytz-2025.1-py2.py3-none-any.whl.metadata (22 kB)\n",
      "Collecting tzdata>=2022.7 (from pandas)\n",
      "  Using cached tzdata-2025.1-py2.py3-none-any.whl.metadata (1.4 kB)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\shrad\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
      "Downloading pandas-2.2.3-cp313-cp313-win_amd64.whl (11.5 MB)\n",
      "   ---------------------------------------- 0.0/11.5 MB ? eta -:--:--\n",
      "   -------- ------------------------------- 2.4/11.5 MB 11.7 MB/s eta 0:00:01\n",
      "   ------------------ --------------------- 5.2/11.5 MB 12.5 MB/s eta 0:00:01\n",
      "   ----------------------------- ---------- 8.4/11.5 MB 13.6 MB/s eta 0:00:01\n",
      "   ---------------------------------------  11.3/11.5 MB 14.4 MB/s eta 0:00:01\n",
      "   ---------------------------------------- 11.5/11.5 MB 13.3 MB/s eta 0:00:00\n",
      "Downloading pytz-2025.1-py2.py3-none-any.whl (507 kB)\n",
      "Downloading tzdata-2025.1-py2.py3-none-any.whl (346 kB)\n",
      "Installing collected packages: pytz, tzdata, pandas\n",
      "Successfully installed pandas-2.2.3 pytz-2025.1 tzdata-2025.1\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 24.3.1 -> 25.0.1\n",
      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "pip install pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "65a235d7-a182-4719-9a62-4d78f77630c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b9c9f8d5-9fb3-4b9d-93c3-b04467e8268a",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = {\n",
    "    \"Math\": [85, 78, 92, 60, 74, 88],\n",
    "    \"Science\": [80, 82, 89, 65, 70, 90],\n",
    "    \"English\": [75, 85, 78, 55, 72, 88],\n",
    "    \"History\": [70, 75, 80, 50, 68, 82]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7f4460ee-2850-4345-a0d4-389664e16a16",
   "metadata": {},
   "outputs": [],
   "source": [
    "students = [\"Student1\", \"Student2\", \"Student3\", \"Student4\", \"Student5\", \"Student6\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "62b56eef-9c61-455c-a6ee-c7ef872da013",
   "metadata": {},
   "outputs": [],
   "source": [
    "exam_scores = pd.DataFrame(data, index=students)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9fc09a6f-0300-4be3-b2c7-e7e50d095cb1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First three rows:\n",
      "           Math  Science  English  History\n",
      "Student1    85       80       75       70\n",
      "Student2    78       82       85       75\n",
      "Student3    92       89       78       80\n"
     ]
    }
   ],
   "source": [
    "print(\"First three rows:\\n\", exam_scores.head(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d07f4b0d-f433-49d1-b91f-42d01274cadf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total students: 6, Total subjects: 4\n"
     ]
    }
   ],
   "source": [
    "num_students, num_subjects = exam_scores.shape\n",
    "print(f\"Total students: {num_students}, Total subjects: {num_subjects}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "abde7870-8ad0-418e-835d-10a19146a292",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total students: 6, Total subjects: 4\n"
     ]
    }
   ],
   "source": [
    "num_students, num_subjects = exam_scores.shape\n",
    "print(f\"Total students: {num_students}, Total subjects: {num_subjects}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1d106316-5b94-4114-a33c-9be0ac967da2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Subjects: ['Math', 'Science', 'English', 'History']\n",
      "Students: ['Student1', 'Student2', 'Student3', 'Student4', 'Student5', 'Student6']\n"
     ]
    }
   ],
   "source": [
    "print(\"Subjects:\", list(exam_scores.columns))\n",
    "print(\"Students:\", list(exam_scores.index))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3acf4826-6992-4bf3-b778-48926048a684",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data types:\n",
      " Math       int64\n",
      "Science    int64\n",
      "English    int64\n",
      "History    int64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(\"Data types:\\n\", exam_scores.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f6dfa2d9-ad92-43ff-83d0-0ec8c8bdf5f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values:\n",
      " Math       0\n",
      "Science    0\n",
      "English    0\n",
      "History    0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(\"Missing values:\\n\", exam_scores.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1e7fd2c9-f5a5-442d-869a-3e43ae8a4581",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'Student 3'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3805\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3804\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 3805\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   3806\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[1;32mindex.pyx:167\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mindex.pyx:196\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\\\_libs\\\\hashtable_class_helper.pxi:7081\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\\\_libs\\\\hashtable_class_helper.pxi:7089\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'Student 3'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[12], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mStudent 3 scores:\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m, \u001b[43mexam_scores\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mloc\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mStudent 3\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m)\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pandas\\core\\indexing.py:1191\u001b[0m, in \u001b[0;36m_LocationIndexer.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   1189\u001b[0m maybe_callable \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39mapply_if_callable(key, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj)\n\u001b[0;32m   1190\u001b[0m maybe_callable \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_deprecated_callable_usage(key, maybe_callable)\n\u001b[1;32m-> 1191\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_getitem_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmaybe_callable\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pandas\\core\\indexing.py:1431\u001b[0m, in \u001b[0;36m_LocIndexer._getitem_axis\u001b[1;34m(self, key, axis)\u001b[0m\n\u001b[0;32m   1429\u001b[0m \u001b[38;5;66;03m# fall thru to straight lookup\u001b[39;00m\n\u001b[0;32m   1430\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_key(key, axis)\n\u001b[1;32m-> 1431\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_label\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pandas\\core\\indexing.py:1381\u001b[0m, in \u001b[0;36m_LocIndexer._get_label\u001b[1;34m(self, label, axis)\u001b[0m\n\u001b[0;32m   1379\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21m_get_label\u001b[39m(\u001b[38;5;28mself\u001b[39m, label, axis: AxisInt):\n\u001b[0;32m   1380\u001b[0m     \u001b[38;5;66;03m# GH#5567 this will fail if the label is not present in the axis.\u001b[39;00m\n\u001b[1;32m-> 1381\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mxs\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pandas\\core\\generic.py:4301\u001b[0m, in \u001b[0;36mNDFrame.xs\u001b[1;34m(self, key, axis, level, drop_level)\u001b[0m\n\u001b[0;32m   4299\u001b[0m             new_index \u001b[38;5;241m=\u001b[39m index[loc]\n\u001b[0;32m   4300\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m-> 4301\u001b[0m     loc \u001b[38;5;241m=\u001b[39m \u001b[43mindex\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   4303\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(loc, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[0;32m   4304\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m loc\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m==\u001b[39m np\u001b[38;5;241m.\u001b[39mbool_:\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3812\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3807\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[0;32m   3808\u001b[0m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc\u001b[38;5;241m.\u001b[39mIterable)\n\u001b[0;32m   3809\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[0;32m   3810\u001b[0m     ):\n\u001b[0;32m   3811\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[1;32m-> 3812\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m   3813\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[0;32m   3814\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[0;32m   3815\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[0;32m   3816\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[0;32m   3817\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n",
      "\u001b[1;31mKeyError\u001b[0m: 'Student 3'"
     ]
    }
   ],
   "source": [
    "print(\"Student 3 scores:\\n\", exam_scores.loc[\"Student 3\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0bed613f-f4e8-4e0b-a5d2-81f14550ef6f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Student3 scores:\n",
      " Math       92\n",
      "Science    89\n",
      "English    78\n",
      "History    80\n",
      "Name: Student3, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(\"Student3 scores:\\n\", exam_scores.loc[\"Student3\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9a7bf2e5-9c93-4160-933e-ef107341a072",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Math scores:\n",
      " Student1    85\n",
      "Student2    78\n",
      "Student3    92\n",
      "Student4    60\n",
      "Student5    74\n",
      "Student6    88\n",
      "Name: Math, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(\"Math scores:\\n\", exam_scores[\"Math\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a1e96ab3-8ff8-4f54-bfdb-7696c0ac0092",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected scores:\n",
      "           Science  English\n",
      "Student1       80       75\n",
      "Student4       65       55\n"
     ]
    }
   ],
   "source": [
    "print(\"Selected scores:\\n\", exam_scores.loc[[\"Student1\", \"Student4\"], [\"Science\", \"English\"]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7964b6b8-e420-46d2-9798-9aa7471910c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First 4 students, first 3 subjects:\n",
      "           Math  Science  English\n",
      "Student1    85       80       75\n",
      "Student2    78       82       85\n",
      "Student3    92       89       78\n",
      "Student4    60       65       55\n"
     ]
    }
   ],
   "source": [
    "print(\"First 4 students, first 3 subjects:\\n\", exam_scores.iloc[:4, :3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1e27cba1-88c8-46d7-8289-c9ad90b9687d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Student5 History score: 68\n"
     ]
    }
   ],
   "source": [
    "print(\"Student5 History score:\", exam_scores.loc[\"Student5\", \"History\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d6163aa4-0b3f-49a3-bbde-23053a084d77",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Updated scores:\n",
      "           Math  Science  English  History\n",
      "Student1    85       80       75       70\n",
      "Student2    85       82       85       75\n",
      "Student3    92       89       78       80\n",
      "Student4    60       65       55       50\n",
      "Student5    74       70       72       68\n",
      "Student6    88       90       88       82\n"
     ]
    }
   ],
   "source": [
    "exam_scores.at[\"Student2\", \"Math\"] = 85\n",
    "print(\"Updated scores:\\n\", exam_scores)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2455bb81-ce73-43d4-8ac2-ec1fb52c8c4d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After adding Student7:\n",
      "           Math  Science  English  History\n",
      "Student1    85       80       75       70\n",
      "Student2    85       82       85       75\n",
      "Student3    92       89       78       80\n",
      "Student4    60       65       55       50\n",
      "Student5    74       70       72       68\n",
      "Student6    88       90       88       82\n",
      "Student7    90       85       88       80\n"
     ]
    }
   ],
   "source": [
    "exam_scores.loc[\"Student7\"] = [90, 85, 88, 80]\n",
    "print(\"After adding Student7:\\n\", exam_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5bf265db-60f8-4bb8-ace0-9a26330f20d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After adding bonus marks:\n",
      "           Math  Science  English  History\n",
      "Student1    90       85       80       75\n",
      "Student2    90       87       90       80\n",
      "Student3    97       94       83       85\n",
      "Student4    65       70       60       55\n",
      "Student5    79       75       77       73\n",
      "Student6    93       95       93       87\n",
      "Student7    95       90       93       85\n"
     ]
    }
   ],
   "source": [
    "exam_scores += 5\n",
    "print(\"After adding bonus marks:\\n\", exam_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7c571bf6-4213-424d-8566-0b6a65f3b6bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After deducting marks from Student4:\n",
      "           Math  Science  English  History\n",
      "Student1    90       85       80       75\n",
      "Student2    90       87       90       80\n",
      "Student3    97       94       83       85\n",
      "Student4    62       67       57       52\n",
      "Student5    79       75       77       73\n",
      "Student6    93       95       93       87\n",
      "Student7    95       90       93       85\n"
     ]
    }
   ],
   "source": [
    "exam_scores.loc[\"Student4\"] -= 3\n",
    "print(\"After deducting marks from Student4:\\n\", exam_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "af795eb1-71d6-44e3-bfe7-321956c9731e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage scores:\n",
      "           Math  Science  English  History\n",
      "Student1  90.0     85.0     80.0     75.0\n",
      "Student2  90.0     87.0     90.0     80.0\n",
      "Student3  97.0     94.0     83.0     85.0\n",
      "Student4  62.0     67.0     57.0     52.0\n",
      "Student5  79.0     75.0     77.0     73.0\n",
      "Student6  93.0     95.0     93.0     87.0\n",
      "Student7  95.0     90.0     93.0     85.0\n"
     ]
    }
   ],
   "source": [
    "percentage_scores = (exam_scores / 100) * 100\n",
    "print(\"Percentage scores:\\n\", percentage_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "07cc1545-b56d-4274-8ff0-2f8cbbb599cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total marks per student:\n",
      " Student1    330\n",
      "Student2    347\n",
      "Student3    359\n",
      "Student4    238\n",
      "Student5    304\n",
      "Student6    368\n",
      "Student7    363\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "total_marks_per_student = exam_scores.sum(axis=1)\n",
    "print(\"Total marks per student:\\n\", total_marks_per_student)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1c620e06-db43-4b2a-9981-2a641d112086",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total marks per subject:\n",
      " Math       606\n",
      "Science    593\n",
      "English    573\n",
      "History    537\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "total_marks_per_subject = exam_scores.sum(axis=0)\n",
    "print(\"Total marks per subject:\\n\", total_marks_per_subject)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b0784956-c23f-48c0-8ac7-b83a789cb2e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Student with the highest total marks: Student6\n"
     ]
    }
   ],
   "source": [
    "top_student = total_marks_per_student.idxmax()\n",
    "print(\"Student with the highest total marks:\", top_student)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "92b60cb2-da8c-4577-8e99-5634de0c3905",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Subject with the lowest total marks: History\n"
     ]
    }
   ],
   "source": [
    "lowest_subject = total_marks_per_subject.idxmin()\n",
    "print(\"Subject with the lowest total marks:\", lowest_subject)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "38ff9b5a-3665-4531-b113-2f826f76600a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average marks per student:\n",
      " Student1    82.50\n",
      "Student2    86.75\n",
      "Student3    89.75\n",
      "Student4    59.50\n",
      "Student5    76.00\n",
      "Student6    92.00\n",
      "Student7    90.75\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "average_marks_per_student = exam_scores.mean(axis=1)\n",
    "print(\"Average marks per student:\\n\", average_marks_per_student)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
